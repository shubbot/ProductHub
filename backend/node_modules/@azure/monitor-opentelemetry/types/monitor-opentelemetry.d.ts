import type { AzureMonitorExporterOptions } from '@azure/monitor-opentelemetry-exporter';
import type { InstrumentationConfig } from '@opentelemetry/instrumentation';
import type { LogRecordProcessor } from '@opentelemetry/sdk-logs';
import type { Resource } from '@opentelemetry/resources';
import type { SpanProcessor } from '@opentelemetry/sdk-trace-base';

/**
 * Azure Monitor OpenTelemetry Options
 */
export declare interface AzureMonitorOpenTelemetryOptions {
    /** Azure Monitor Exporter Configuration */
    azureMonitorExporterOptions?: AzureMonitorExporterOptions;
    /** OpenTelemetry Resource */
    resource?: Resource;
    /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */
    samplingRatio?: number;
    /** Enable Live Metrics feature (Default false)*/
    enableLiveMetrics?: boolean;
    /** Enable Standard Metrics feature (Default true)*/
    enableStandardMetrics?: boolean;
    /** Enable log sampling based on trace (Default true) */
    enableTraceBasedSamplingForLogs?: boolean;
    /** OpenTelemetry Instrumentations options included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4) */
    instrumentationOptions?: InstrumentationOptions;
    /** Application Insights Web Instrumentation options (enabled, connectionString, src, config)*/
    browserSdkLoaderOptions?: BrowserSdkLoaderOptions;
    /** An array of log record processors to register to the logger provider.*/
    logRecordProcessors?: LogRecordProcessor[];
    /** An array of span processors to register to the tracer provider.*/
    spanProcessors?: SpanProcessor[];
}

/**
 * Application Insights Web Instrumentation Configuration interface
 */
export declare interface BrowserSdkLoaderOptions {
    /** Browser SDK Loader Enable */
    enabled?: boolean;
    /** Browser SDK Loader Connection String */
    connectionString?: string;
}

/**
 * OpenTelemetry Instrumentations Configuration interface
 */
export declare interface InstrumentationOptions {
    /** Azure SDK Instrumentation Config */
    azureSdk?: InstrumentationConfig;
    /** HTTP Instrumentation Config */
    http?: InstrumentationConfig;
    /** MongoDB Instrumentation Config */
    mongoDb?: InstrumentationConfig;
    /** MySQL Instrumentation Config */
    mySql?: InstrumentationConfig;
    /** PostgreSql Instrumentation Config */
    postgreSql?: InstrumentationConfig;
    /** Redis Instrumentation Config */
    redis?: InstrumentationConfig;
    /** Redis4 Instrumentation Config */
    redis4?: InstrumentationConfig;
    /** Bunyan Instrumentation Config */
    bunyan?: InstrumentationConfig;
    /** Winston Instrumentation Config */
    winston?: InstrumentationConfig;
}

/**
 * Shutdown Azure Monitor Open Telemetry Distro
 * @see https://github.com/open-telemetry/opentelemetry-js/blob/0229434cb5a3179f63c021105f36270ae7897929/experimental/packages/opentelemetry-sdk-node/src/sdk.ts#L398
 */
export declare function shutdownAzureMonitor(): Promise<void>;

/**
 * Initialize Azure Monitor Distro
 * @param options - Azure Monitor OpenTelemetry Options
 */
export declare function useAzureMonitor(options?: AzureMonitorOpenTelemetryOptions): void;

export { }
