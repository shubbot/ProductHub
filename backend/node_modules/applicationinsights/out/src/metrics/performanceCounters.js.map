{"version":3,"file":"performanceCounters.js","sourceRoot":"","sources":["../../../src/metrics/performanceCounters.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as os from \"os\";\r\nimport {\r\n    Histogram,\r\n    Meter,\r\n    ObservableCallback,\r\n    ObservableGauge,\r\n    ObservableResult,\r\n    SpanKind,\r\n    ValueType,\r\n} from \"@opentelemetry/api\";\r\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\r\nimport {\r\n    MeterProvider,\r\n    MeterProviderOptions,\r\n    PeriodicExportingMetricReader,\r\n    PeriodicExportingMetricReaderOptions,\r\n} from \"@opentelemetry/sdk-metrics\";\r\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\r\nimport { PerformanceCounterMetricNames } from \"./types\";\r\nimport { ApplicationInsightsConfig } from \"../shared/configuration/config\";\r\n\r\n/**\r\n * Azure Monitor PerformanceCounter Metrics \r\n */\r\nexport class PerformanceCounterMetrics {\r\n    private _internalConfig: ApplicationInsightsConfig;\r\n    private _collectionInterval = 60000; // 60 seconds\r\n    private _meterProvider: MeterProvider;\r\n    private _azureExporter: AzureMonitorMetricExporter;\r\n    private _metricReader: PeriodicExportingMetricReader;\r\n    private _meter: Meter;\r\n    private _requestDurationHistogram: Histogram;\r\n    private _requestRateGauge: ObservableGauge;\r\n    private _requestRateGaugeCallback: ObservableCallback;\r\n    private _memoryPrivateBytesGauge: ObservableGauge;\r\n    private _memoryPrivateBytesGaugeCallback: ObservableCallback;\r\n    private _memoryAvailableBytesGauge: ObservableGauge;\r\n    private _memoryAvailableBytesGaugeCallback: ObservableCallback;\r\n    private _processorTimeGauge: ObservableGauge;\r\n    private _processorTimeGaugeCallback: ObservableCallback;\r\n    private _processTimeGauge: ObservableGauge;\r\n    private _processTimeGaugeCallback: ObservableCallback;\r\n    private _totalCount = 0;\r\n    private _intervalExecutionTime = 0;\r\n    private _lastRequestRate: { count: number; time: number; executionInterval: number };\r\n    private _lastAppCpuUsage: { user: number; system: number };\r\n    private _lastHrtime: number[];\r\n    private _lastCpus: {\r\n        model: string;\r\n        speed: number;\r\n        times: { user: number; nice: number; sys: number; idle: number; irq: number };\r\n    }[];\r\n    private _lastCpusProcess: {\r\n        model: string;\r\n        speed: number;\r\n        times: { user: number; nice: number; sys: number; idle: number; irq: number };\r\n    }[];\r\n\r\n    /**\r\n     * Creates performance counter instruments.\r\n     * @param options - Distro configuration.\r\n     * @param config - Application Insights configuration.\r\n     */\r\n    constructor(config: ApplicationInsightsConfig, options?: { collectionInterval: number }) {\r\n        this._internalConfig = config;\r\n        this._lastCpus = os.cpus();\r\n        this._lastCpusProcess = os.cpus();\r\n        this._lastAppCpuUsage = (process as any).cpuUsage();\r\n        this._lastHrtime = process.hrtime();\r\n\r\n        this._lastRequestRate = {\r\n            count: this._totalCount,\r\n            time: +new Date(),\r\n            executionInterval: this._intervalExecutionTime,\r\n        };\r\n\r\n        const meterProviderConfig: MeterProviderOptions = {\r\n            resource: this._internalConfig.resource,\r\n        };\r\n        this._meterProvider = new MeterProvider(meterProviderConfig);\r\n        this._azureExporter = new AzureMonitorMetricExporter(this._internalConfig.azureMonitorExporterOptions);\r\n        const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\r\n            exporter: this._azureExporter as any,\r\n            exportIntervalMillis: options?.collectionInterval || this._collectionInterval,\r\n        };\r\n        this._metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\r\n        this._meterProvider.addMetricReader(this._metricReader);\r\n        this._meter = this._meterProvider.getMeter(\"AzureMonitorPerformanceCountersMeter\");\r\n\r\n        this._lastRequestRate = { count: 0, time: 0, executionInterval: 0 };\r\n\r\n        // Create Instruments\r\n        this._requestDurationHistogram = this._meter.createHistogram(\r\n            PerformanceCounterMetricNames.REQUEST_DURATION,\r\n            { valueType: ValueType.DOUBLE }\r\n        );\r\n        this._requestRateGauge = this._meter.createObservableGauge(\r\n            PerformanceCounterMetricNames.REQUEST_RATE,\r\n            {\r\n                description: \"Incoming Requests Average Execution Time\",\r\n                valueType: ValueType.DOUBLE,\r\n            }\r\n        );\r\n        this._memoryPrivateBytesGauge = this._meter.createObservableGauge(\r\n            PerformanceCounterMetricNames.PRIVATE_BYTES,\r\n            { description: \"Amount of memory process has used in bytes\", valueType: ValueType.INT }\r\n        );\r\n        this._memoryAvailableBytesGauge = this._meter.createObservableGauge(\r\n            PerformanceCounterMetricNames.AVAILABLE_BYTES,\r\n            { description: \"Amount of available memory in bytes\", valueType: ValueType.INT }\r\n        );\r\n        this._processorTimeGauge = this._meter.createObservableGauge(\r\n            PerformanceCounterMetricNames.PROCESSOR_TIME,\r\n            {\r\n                description: \"Processor time as a percentage\",\r\n                valueType: ValueType.DOUBLE,\r\n            }\r\n        );\r\n        this._processTimeGauge = this._meter.createObservableGauge(\r\n            PerformanceCounterMetricNames.PROCESS_TIME,\r\n            {\r\n                description: \"Process CPU usage as a percentage\",\r\n                valueType: ValueType.DOUBLE,\r\n            }\r\n        );\r\n\r\n        // Add callbacks\r\n        this._requestRateGaugeCallback = this._getRequestRate.bind(this);\r\n        this._memoryPrivateBytesGaugeCallback = this._getPrivateMemory.bind(this);\r\n        this._memoryAvailableBytesGaugeCallback = this._getAvailableMemory.bind(this);\r\n        this._processorTimeGaugeCallback = this._getProcessorTime.bind(this);\r\n        this._processTimeGaugeCallback = this._getProcessTime.bind(this);\r\n        this._memoryPrivateBytesGauge.addCallback(this._memoryPrivateBytesGaugeCallback);\r\n        this._memoryAvailableBytesGauge.addCallback(this._memoryAvailableBytesGaugeCallback);\r\n        this._processTimeGauge.addCallback(this._processTimeGaugeCallback);\r\n        this._processorTimeGauge.addCallback(this._processorTimeGaugeCallback);\r\n        this._requestRateGauge.addCallback(this._requestRateGaugeCallback);\r\n    }\r\n\r\n    /**\r\n    * Shutdown Meter Provider it will return no-op Meters after being called.\r\n    */\r\n    public async shutdown(): Promise<void> {\r\n        return this._meterProvider.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Force flush Meter Provider.\r\n     */\r\n    public async flush(): Promise<void> {\r\n        return this._meterProvider.forceFlush();\r\n    }\r\n\r\n    /**\r\n     *Get OpenTelemetry MeterProvider\r\n     */\r\n    public getMeterProvider(): MeterProvider {\r\n        return this._meterProvider;\r\n    }\r\n\r\n    /**\r\n     * Record Span metrics\r\n     */\r\n    public recordSpan(span: ReadableSpan): void {\r\n        if (span.kind !== SpanKind.SERVER) {\r\n            return;\r\n        }\r\n        this._totalCount++;\r\n        const durationMs = span.duration[0];\r\n        this._intervalExecutionTime += durationMs;\r\n        this._requestDurationHistogram.record(durationMs);\r\n    }\r\n\r\n    private _getRequestRate(observableResult: ObservableResult) {\r\n        const currentTime = +new Date();\r\n        const intervalRequests = this._totalCount - this._lastRequestRate.count || 0;\r\n        const elapsedMs = currentTime - this._lastRequestRate.time;\r\n        if (elapsedMs > 0) {\r\n            const elapsedSeconds = elapsedMs / 1000;\r\n            const requestsPerSec = intervalRequests / elapsedSeconds;\r\n            observableResult.observe(requestsPerSec);\r\n        }\r\n        this._lastRequestRate = {\r\n            count: this._totalCount,\r\n            time: currentTime,\r\n            executionInterval: this._lastRequestRate.executionInterval,\r\n        };\r\n    }\r\n\r\n    private _getPrivateMemory(observableResult: ObservableResult) {\r\n        observableResult.observe(process.memoryUsage().rss);\r\n    }\r\n\r\n    private _getAvailableMemory(observableResult: ObservableResult) {\r\n        observableResult.observe(os.freemem());\r\n    }\r\n\r\n    private _getTotalCombinedCpu(cpus: os.CpuInfo[], lastCpus: os.CpuInfo[]) {\r\n        let totalUser = 0;\r\n        let totalSys = 0;\r\n        let totalNice = 0;\r\n        let totalIdle = 0;\r\n        let totalIrq = 0;\r\n        for (let i = 0; !!cpus && i < cpus.length; i++) {\r\n            const cpu = cpus[i];\r\n            const lastCpu = lastCpus[i];\r\n            const times = cpu.times;\r\n            const lastTimes = lastCpu.times;\r\n            // user cpu time (or) % CPU time spent in user space\r\n            let user = times.user - lastTimes.user;\r\n            user = user > 0 ? user : 0; // Avoid negative values\r\n            totalUser += user;\r\n            // system cpu time (or) % CPU time spent in kernel space\r\n            let sys = times.sys - lastTimes.sys;\r\n            sys = sys > 0 ? sys : 0; // Avoid negative values\r\n            totalSys += sys;\r\n            // user nice cpu time (or) % CPU time spent on low priority processes\r\n            let nice = times.nice - lastTimes.nice;\r\n            nice = nice > 0 ? nice : 0; // Avoid negative values\r\n            totalNice += nice;\r\n            // idle cpu time (or) % CPU time spent idle\r\n            let idle = times.idle - lastTimes.idle;\r\n            idle = idle > 0 ? idle : 0; // Avoid negative values\r\n            totalIdle += idle;\r\n            // irq (or) % CPU time spent servicing/handling hardware interrupts\r\n            let irq = times.irq - lastTimes.irq;\r\n            irq = irq > 0 ? irq : 0; // Avoid negative values\r\n            totalIrq += irq;\r\n        }\r\n        const combinedTotal = totalUser + totalSys + totalNice + totalIdle + totalIrq;\r\n        return {\r\n            combinedTotal: combinedTotal,\r\n            totalUser: totalUser,\r\n            totalIdle: totalIdle,\r\n        };\r\n    }\r\n\r\n    private _getProcessorTime(observableResult: ObservableResult) {\r\n        // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\r\n        // to find the delta since the last measurement\r\n        const cpus = os.cpus();\r\n        if (cpus && cpus.length && this._lastCpus && cpus.length === this._lastCpus.length) {\r\n            const cpuTotals = this._getTotalCombinedCpu(cpus, this._lastCpus);\r\n\r\n            const value =\r\n                cpuTotals.combinedTotal > 0\r\n                    ? ((cpuTotals.combinedTotal - cpuTotals.totalIdle) / cpuTotals.combinedTotal) * 100\r\n                    : 0;\r\n            observableResult.observe(value);\r\n        }\r\n        this._lastCpus = cpus;\r\n    }\r\n\r\n    private _getProcessTime(observableResult: ObservableResult) {\r\n        // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\r\n        // to find the delta since the last measurement\r\n        const cpus = os.cpus();\r\n        if (\r\n            cpus &&\r\n            cpus.length &&\r\n            this._lastCpusProcess &&\r\n            cpus.length === this._lastCpusProcess.length\r\n        ) {\r\n            // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\r\n            let appCpuPercent: number | undefined = undefined;\r\n            const appCpuUsage = (process as any).cpuUsage();\r\n            const hrtime = process.hrtime();\r\n            const totalApp =\r\n                appCpuUsage.user -\r\n                this._lastAppCpuUsage.user +\r\n                (appCpuUsage.system - this._lastAppCpuUsage.system) || 0;\r\n\r\n            if (typeof this._lastHrtime !== \"undefined\" && this._lastHrtime.length === 2) {\r\n                const elapsedTime =\r\n                    (hrtime[0] - this._lastHrtime[0]) * 1e6 + (hrtime[1] - this._lastHrtime[1]) / 1e3 || 0; // convert to microseconds\r\n\r\n                appCpuPercent = (100 * totalApp) / (elapsedTime * cpus.length);\r\n            }\r\n            // Set previous\r\n            this._lastAppCpuUsage = appCpuUsage;\r\n            this._lastHrtime = hrtime;\r\n            const cpuTotals = this._getTotalCombinedCpu(cpus, this._lastCpusProcess);\r\n            const value = appCpuPercent || (cpuTotals.totalUser / cpuTotals.combinedTotal) * 100;\r\n            observableResult.observe(value);\r\n        }\r\n        this._lastCpusProcess = cpus;\r\n    }\r\n}\r\n"]}