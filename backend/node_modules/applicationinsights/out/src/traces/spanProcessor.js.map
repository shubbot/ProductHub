{"version":3,"file":"spanProcessor.js","sourceRoot":"","sources":["../../../src/traces/spanProcessor.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAMlC;;;GAGG;AACH,MAAa,yBAAyB;IAGlC,YAAY,aAAwC;QAChD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,UAAU;QACN,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,QAAiB;QACjC,OAAO;IACX,CAAC;IAED,KAAK,CAAC,IAAkB;QACpB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,QAAQ;QACJ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;CACJ;AAtBD,8DAsBC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { Context } from \"@opentelemetry/api\";\r\nimport { ReadableSpan, Span, SpanProcessor } from \"@opentelemetry/sdk-trace-base\";\r\nimport { PerformanceCounterMetrics } from \"../metrics/performanceCounters\";\r\n\r\n/**\r\n * Azure Monitor Span Processor.\r\n * @internal\r\n */\r\nexport class AzureMonitorSpanProcessor implements SpanProcessor {\r\n    private readonly _metricHandler: PerformanceCounterMetrics;\r\n\r\n    constructor(metricHandler: PerformanceCounterMetrics) {\r\n        this._metricHandler = metricHandler;\r\n    }\r\n\r\n    forceFlush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onStart(span: Span, _context: Context): void {\r\n        return;\r\n    }\r\n\r\n    onEnd(span: ReadableSpan): void {\r\n        this._metricHandler.recordSpan(span);\r\n    }\r\n\r\n    shutdown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n"]}